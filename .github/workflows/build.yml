name: Build Godot Project

on:
  workflow_dispatch:

jobs:
  # job id, can be anything
  export_game:
    # Always use ubuntu-latest for this action
    runs-on: ubuntu-latest
    # Add permission for release creation. Can be made narrower according to your needs
    permissions: write-all
    # Job name, can be anything
    name: Export Game
    steps:
      # Always include the checkout step so that 
      # your project is available for Godot to export
    - name: checkout
      uses: actions/checkout@v3.3.0
  
    - name: export game
      id: export
      # Use latest version (see releases for all versions)
      uses: firebelley/godot-export@v5.2.0
      with:
        # Defining all the required inputs
        godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.0/Godot_v4.0-stable_linux.x86_64.zip
        godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.0/Godot_v4.0-stable_export_templates.tpz
        relative_project_path: ./
        archive_output: true
    - name: ls-build
      run: ls -la ${{ steps.export.outputs.build_directory }}
    - name: ls-build2
      run: ls -la ${{ steps.export.outputs.archive_directory }}
    - name: ls
      run: ls -la
    - uses: actions/upload-artifact@v3
      with:
        name: LL.x86_64
        path: ${{ steps.export.outputs.build_directory }}/LinuxX11/LL.x86_64
    - uses: actions/upload-artifact@v3
      with:
        name: LL.pck
        path: ${{ steps.export.outputs.build_directory }}/LinuxX11/LL.pck
  package:
    runs-on: ubuntu-latest
    needs: export_game
    container: 
      image: ghcr.io/andyholmes/flatter/freedesktop:23.08
      options: --privileged
    name: package
    steps:
      - name: checkout
        uses: actions/checkout@v3.3.0
      - uses: actions/download-artifact@master
        with:
          name: LL.x86_64
          path: .
      - uses: actions/download-artifact@master
        with:
          name: LL.pck
          path: .
      - name: list-dir
        run: ls -la
      - name: Setup GPG
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Build
        uses: andyholmes/flatter@main
        with:
          files: |
            com.github.NateWright.LeveledLogic.json
          gpg-sign: ${{ steps.gpg.outputs.fingerprint }}
          upload-pages-artifact: true
          upload-pages-includes: |
            default.css
            index.html
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: package
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      # This release action has worked well for me. However, you can most likely use any release action of your choosing.
      # https://github.com/ncipollo/release-action
    # - name: create release
    #   uses: ncipollo/release-action@v1.12.0
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     generateReleaseNotes: true
    #     tag: ${{ github.ref_name }}
    #     artifacts: ${{ steps.export.outputs.archive_directory }}/*
